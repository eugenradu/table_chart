// Generated by IcedCoffeeScript 108.0.9
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  c3.Legend = (function(_super) {
    __extends(Legend, _super);

    function Legend() {
      this._style = __bind(this._style, this);
      this._update = __bind(this._update, this);
      this._init = __bind(this._init, this);
      return Legend.__super__.constructor.apply(this, arguments);
    }

    Legend.version = 0.1;

    Legend.prototype.type = 'legend';

    Legend.prototype.data = [];

    Legend.prototype.key = void 0;

    Legend.prototype.filter = void 0;

    Legend.prototype.nest = void 0;

    Legend.prototype.nest_key = void 0;

    Legend.prototype.hoverable = true;

    Legend.prototype.list_options = void 0;

    Legend.prototype.item_options = void 0;

    Legend.prototype.nested_item_options = void 0;

    Legend.prototype.bullet_options = void 0;

    Legend.prototype.nested_bullet_options = void 0;

    Legend.prototype._init = function() {
      var _base, _base1;
      if (this.nest == null) {
        this.nest = function(d) {
          if (Array.isArray(d)) {
            return d;
          } else {
            return [];
          }
        };
      }
      if (this.filter == null) {
        this.filter = (function(_this) {
          return function(d) {
            var _base, _base1, _ref, _ref1, _ref2;
            return (_ref = (_ref1 = (_ref2 = typeof (_base = _this.item_options).html === "function" ? _base.html(d) : void 0) != null ? _ref2 : _this.item_options.html) != null ? _ref1 : typeof (_base1 = _this.item_options).text === "function" ? _base1.text(d) : void 0) != null ? _ref : _this.item_options.text;
          };
        })(this);
      }
      if (this.item_options == null) {
        this.item_options = {};
      }
      if ((_base = this.item_options).text == null) {
        _base.text = function(d) {
          if (Array.isArray(d)) {
            return "" + d.length + " items";
          } else {
            return d;
          }
        };
      }
      if (this.nested_item_options == null) {
        this.nested_item_options = this.item_options;
      }
      if (this.bullet_options == null) {
        this.bullet_options = {};
      }
      if ((_base1 = this.bullet_options).text == null) {
        _base1.text = "•";
      }
      if (this.nested_bullet_options == null) {
        this.nested_bullet_options = this.bullet_options;
      }
      return this.list = c3.select(d3.select(this.anchor), 'ul').singleton();
    };

    Legend.prototype._update = function() {
      var datum, i, item_content, nested_item_content, _ref, _ref1;
      this.current_data = this.filter ? (function() {
        var _i, _len, _ref, _results;
        _ref = this.data;
        _results = [];
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          datum = _ref[i];
          if (this.filter(datum, i)) {
            _results.push(datum);
          }
        }
        return _results;
      }).call(this) : this.data;
      item_content = {
        text: this.item_options.text,
        html: this.item_options.html
      };
      nested_item_content = {
        text: this.nested_item_options.text,
        html: this.nested_item_options.html
      };
      delete this.item_options.html;
      delete this.item_options.text;
      delete this.nested_item_options.html;
      delete this.nested_item_options.text;
      if ((_ref = this.list_options) != null) {
        delete _ref.html;
      }
      if ((_ref1 = this.list_options) != null) {
        delete _ref1.text;
      }
      this.list.options(this.list_options).update();
      this.items = this.list.select('ul:not(.child) > li').bind(this.current_data, this.key);
      this.items.options(this.item_options).update();
      this.items.inherit('span.content').options(item_content).update();
      if (this.bullet_options) {
        this.bullets = this.items.inherit('ul:not(.child) > li > span.bullet', true, true);
        this.bullets.options(this.bullet_options).update();
      }
      if (this.nest) {
        this.nested_items = this.items.inherit('ul.child').select('li').bind(this.nest, this.nest_key);
        this.nested_items.options(this.nested_item_options).update();
        this.nested_items.inherit('span.content').options(nested_item_content).update();
        if (this.nested_bullet_options) {
          this.nested_bullets = this.nested_items.inherit('span.bullet', true, true);
          this.nested_bullets.options(this.nested_bullet_options).update();
        }
      }
      this.item_options.text = item_content.text;
      this.item_options.html = item_content.html;
      this.nested_item_options.text = nested_item_content.text;
      this.nested_item_options.html = nested_item_content.html;
      return this.items.select('ul > li').all.each(function() {
        return d3.select(this).node().parentNode.parentNode.classList.add('parent');
      });
    };

    Legend.prototype._style = function(style_new) {
      var _ref, _ref1, _ref2;
      this.list.style().all.classed({
        'c3': true,
        'legend': true,
        'hoverable': this.hoverable
      });
      this.items.style(style_new);
      if ((_ref = this.nested_items) != null) {
        _ref.style(style_new);
      }
      if ((_ref1 = this.bullets) != null) {
        _ref1.style(style_new);
      }
      return (_ref2 = this.nested_bullets) != null ? _ref2.style(style_new) : void 0;
    };

    return Legend;

  })(c3.Base);

  c3.Legend.PlotLegend = (function(_super) {
    __extends(PlotLegend, _super);

    function PlotLegend() {
      this._style = __bind(this._style, this);
      this._update = __bind(this._update, this);
      this._init = __bind(this._init, this);
      return PlotLegend.__super__.constructor.apply(this, arguments);
    }

    PlotLegend.version = 0.1;

    PlotLegend.prototype.type = 'plot_legend';

    PlotLegend.prototype.plot = void 0;

    PlotLegend.prototype.html_names = false;

    PlotLegend.prototype.hover_fade = 0.2;

    PlotLegend.prototype.duration = 750;

    PlotLegend.prototype._init = function() {
      var layer_name, layer_title, stack_name, stack_title, _base, _base1, _base10, _base11, _base2, _base3, _base4, _base5, _base6, _base7, _base8, _base9;
      if (this.plot == null) {
        throw Error("Plot legend must have a plot option refering to a c3.Plot.");
      }
      if (!(this.plot instanceof c3.Plot)) {
        throw Error("Plot option must reference a c3.Plot type object.");
      }
      if (!this.plot.rendered) {
        throw Error("plot_legend's linked plot should be rendered before rendering the legend.");
      }
      this.data = this.plot.layers;
      if (this.key == null) {
        this.key = function(layer) {
          return layer.uid;
        };
      }
      if (this.nest == null) {
        this.nest = function(layer) {
          var _ref;
          return (_ref = layer.stacks) != null ? _ref : [];
        };
      }
      if (this.item_options == null) {
        this.item_options = {};
      }
      if (this.nested_item_options == null) {
        this.nested_item_options = {};
      }
      layer_title = (function(_this) {
        return function(layer, i) {
          var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
          return (_ref = (_ref1 = (_ref2 = (_ref3 = layer.options) != null ? _ref3.title : void 0) != null ? _ref2 : (_ref4 = _this.plot.layer_options) != null ? typeof _ref4.title === "function" ? _ref4.title(layer, i) : void 0 : void 0) != null ? _ref1 : (_ref5 = _this.plot.layer_options) != null ? _ref5.title : void 0) != null ? _ref : layer.name;
        };
      })(this);
      layer_name = function(layer, i) {
        var _ref, _ref1;
        return (_ref = (_ref1 = layer.name) != null ? _ref1 : layer_title(layer, i)) != null ? _ref : layer.type;
      };
      stack_title = function(stack, i, layer) {
        var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        return (_ref = (_ref1 = (_ref2 = (_ref3 = stack.options) != null ? _ref3.title : void 0) != null ? _ref2 : layer != null ? (_ref4 = layer.stack_options) != null ? typeof _ref4.title === "function" ? _ref4.title(stack) : void 0 : void 0 : void 0) != null ? _ref1 : layer != null ? (_ref5 = layer.stack_options) != null ? _ref5.title : void 0 : void 0) != null ? _ref : stack.name;
      };
      stack_name = function(stack, i, layer) {
        var _ref, _ref1;
        return (_ref = (_ref1 = stack.name) != null ? _ref1 : stack_title(stack, i, layer)) != null ? _ref : "stack";
      };
      if (this.html_names) {
        if ((_base = this.item_options).html == null) {
          _base.html = layer_name;
        }
        if ((_base1 = this.nested_item_options).html == null) {
          _base1.html = stack_name;
        }
      } else {
        if ((_base2 = this.item_options).text == null) {
          _base2.text = layer_name;
        }
        if ((_base3 = this.nested_item_options).text == null) {
          _base3.text = stack_name;
        }
      }
      if ((_base4 = this.item_options).title == null) {
        _base4.title = layer_title;
      }
      if ((_base5 = this.nested_item_options).title == null) {
        _base5.title = stack_title;
      }
      if (this.hoverable) {
        if ((_base6 = this.item_options).events == null) {
          _base6.events = {};
        }
        if ((_base7 = this.item_options.events).mouseenter == null) {
          _base7.mouseenter = (function(_this) {
            return function(hover_layer, hover_layer_idx) {
              var fade;
              fade = _this.hover_fade;
              _this.plot.layers_selection.all.style('opacity', function(layer, i) {
                var old_opacity, _ref;
                old_opacity = (_ref = d3.select(this).style('opacity')) != null ? _ref : 1;
                if (layer !== hover_layer) {
                  return fade * old_opacity;
                } else {
                  return old_opacity;
                }
              });
              return _this.trigger('layer_mouseenter', hover_layer, hover_layer_idx);
            };
          })(this);
        }
        if ((_base8 = this.item_options.events).mouseleave == null) {
          _base8.mouseleave = (function(_this) {
            return function(hover_layer, hover_layer_idx) {
              _this.plot.layers_selection.all.style('opacity', function(layer, i) {
                var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
                return (_ref = (_ref1 = (_ref2 = (_ref3 = (_ref4 = layer.options) != null ? (_ref5 = _ref4.styles) != null ? typeof _ref5.opacity === "function" ? _ref5.opacity(layer, i) : void 0 : void 0 : void 0) != null ? _ref3 : (_ref6 = layer.options) != null ? (_ref7 = _ref6.styles) != null ? _ref7.opacity : void 0 : void 0) != null ? _ref2 : (_ref8 = layer.styles) != null ? typeof _ref8.opacity === "function" ? _ref8.opacity(layer, i) : void 0 : void 0) != null ? _ref1 : (_ref9 = layer.styles) != null ? _ref9.opacity : void 0) != null ? _ref : 1;
              });
              return _this.trigger('layer_mouseleave', hover_layer, hover_layer_idx);
            };
          })(this);
        }
        if ((_base9 = this.nested_item_options).events == null) {
          _base9.events = {};
        }
        if ((_base10 = this.nested_item_options.events).mouseenter == null) {
          _base10.mouseenter = (function(_this) {
            return function(hover_stack, hover_stack_idx, hover_layer_idx) {
              var duration, fade, layer, _ref, _ref1;
              layer = _this.plot.layers[hover_layer_idx];
              fade = _this.hover_fade;
              layer.groups.all.style('opacity', function(stack, i) {
                var old_opacity, _ref;
                old_opacity = (_ref = d3.select(this).style('opacity')) != null ? _ref : 1;
                if (stack !== hover_stack) {
                  return fade * old_opacity;
                } else {
                  return old_opacity;
                }
              });
              duration = _this.duration;
              if ((_ref = layer.rects) != null) {
                _ref.all.filter(function(d, i, stack_idx) {
                  return stack_idx === hover_stack_idx;
                }).transition().duration(duration).attr('transform', function() {
                  var rect;
                  rect = d3.select(this);
                  return "translate(0," + (layer.v.range()[0] - rect.attr('y') - rect.attr('height')) + ")";
                });
              }
              if (layer.path_generator != null) {
                if ((_ref1 = layer.paths) != null) {
                  _ref1.all.filter(function(stack, stack_idx) {
                    return stack_idx === hover_stack_idx;
                  }).transition().duration(duration).attr('d', function(stack, stack_idx) {
                    layer.path_generator.x(function(d, i) {
                      var _ref2;
                      return ((_ref2 = layer.chart.orig_h) != null ? _ref2 : layer.h)(stack.values[i].x);
                    }).y(function(d, i) {
                      return layer.v(stack.values[i].y);
                    }).y0(layer.v.range()[0]);
                    return layer.path_generator(stack.current_data);
                  });
                }
              }
              return _this.trigger('stack_mouseenter', hover_stack, hover_stack_idx, hover_layer_idx);
            };
          })(this);
        }
        if ((_base11 = this.nested_item_options.events).mouseleave == null) {
          _base11.mouseleave = (function(_this) {
            return function(hover_stack, hover_stack_idx, hover_layer_idx) {
              var layer, _ref, _ref1;
              layer = _this.plot.layers[hover_layer_idx];
              layer.groups.all.style('opacity', function(stack, i) {
                var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
                return (_ref = (_ref1 = (_ref2 = layer.stack_options) != null ? (_ref3 = _ref2.styles) != null ? typeof _ref3.opacity === "function" ? _ref3.opacity(stack, i) : void 0 : void 0 : void 0) != null ? _ref1 : (_ref4 = layer.stack_options) != null ? (_ref5 = _ref4.styles) != null ? _ref5.opacity : void 0 : void 0) != null ? _ref : 1;
              });
              if ((_ref = layer.rects) != null) {
                _ref.all.transition().duration(_this.duration).attr('transform', '');
              }
              if ((_ref1 = layer.paths) != null) {
                _ref1.all.interrupt();
              }
              layer.draw();
              return _this.trigger('stack_mouseleave', hover_stack, hover_stack_idx, hover_layer_idx);
            };
          })(this);
        }
      }
      PlotLegend.__super__._init.apply(this, arguments);
      this.list.all.classed('plot_legend', true);
      return this.plot.on('restyle.legend', this.restyle);
    };

    PlotLegend.prototype._update = function() {
      var generate_glyph, plot, size;
      delete this.bullet_options.text;
      delete this.bullet_options.html;
      PlotLegend.__super__._update.apply(this, arguments);
      size = 16;
      generate_glyph = function(svg, layer, stack_idx) {
        var node, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
        if (stack_idx == null) {
          stack_idx = 0;
        }
        if (layer instanceof c3.Layer.Line) {
          node = layer.paths.all[0][stack_idx];
          return svg.select('line').singleton(node).position({
            x1: 0,
            y1: size / 2,
            x2: size,
            y2: size / 2
          });
        } else if (layer instanceof c3.Layer.Line.Horizontal) {
          node = layer.lines.all.node();
          return svg.select('line').singleton(node).position({
            x1: 0,
            y1: size / 2,
            x2: size,
            y2: size / 2
          });
        } else if (layer instanceof c3.Layer.Line.Vertical) {
          node = layer.lines.all.node();
          return svg.select('line').singleton(node).position({
            x1: size / 2,
            y1: 0,
            x2: size / 2,
            y2: size
          });
        } else if (layer instanceof c3.Layer.Scatter) {
          node = layer.circles.all.node();
          return svg.select('circle').singleton(node).position({
            cx: size / 2,
            cy: size / 2,
            r: size / 4
          });
        } else {
          node = (_ref = (_ref1 = (_ref2 = (_ref3 = layer.paths) != null ? _ref3.all[0][stack_idx] : void 0) != null ? _ref2 : (_ref4 = layer.rects) != null ? _ref4.all[stack_idx][0] : void 0) != null ? _ref1 : (_ref5 = layer.groups) != null ? _ref5.all.node() : void 0) != null ? _ref : layer.g.node();
          return svg.select('rect').singleton(node).position({
            x: size * 0.1,
            y: size * 0.1,
            height: size * 0.8,
            width: size * 0.8,
            rx: size / 5,
            ry: size / 5
          });
        }
      };
      this.bullets_svg = this.bullets.inherit('svg');
      this.bullets_svg.all.attr({
        height: size,
        width: size
      });
      this.bullets_svg.all.each(function(layer) {
        if (layer.stacks == null) {
          return generate_glyph(c3.select(d3.select(this)), layer);
        } else {
          return d3.select(this.parentNode).remove();
        }
      });
      this.nested_bullets_svg = this.nested_bullets.inherit('svg');
      this.nested_bullets_svg.all.attr({
        height: size,
        width: size
      });
      plot = this.plot;
      return this.nested_bullets_svg.all.each(function(stack, stack_idx, layer_idx) {
        var layer;
        layer = plot.layers[layer_idx];
        return generate_glyph(c3.select(d3.select(this)), layer, stack_idx);
      });
    };

    PlotLegend.prototype._style = function() {
      PlotLegend.__super__._style.apply(this, arguments);
      return this.list.all.selectAll('li > .bullet > svg > *').each(function(node) {
        var glyph, src_styles, style, _i, _len, _ref, _results;
        if (node) {
          glyph = d3.select(this);
          src_styles = getComputedStyle(node);
          _ref = ['stroke', 'stroke-dasharray', 'stroke-width', 'fill', 'opacity'];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            style = _ref[_i];
            _results.push(glyph.style(style, src_styles.getPropertyValue(style)));
          }
          return _results;
        }
      });
    };

    return PlotLegend;

  })(c3.Legend);

}).call(this);
